static void HeapSort(int[] arr){
  int n = arr.length;
  
  for(int i=n/2-1; i>=0; i--){
     //inital heap 
     heapify(arr, n, i);
  }
  for(int i=n-1; i>0; i--){
     //max element sort at the end of arr and process of resetting heap
     int temp = arr[0];
     arr[0] = arr[i];
     arr[i] = temp;
     heapify(arr, i, 0);
    }
}

static void heapify(int[] arr, int n, int i){
  int p = i;
  int l = i * 2 + 1;	//left child
  int r = i * 2 + 2; 	//right child

  if(l < n && arr[p] < arr[l]){
    p = l;
  }
  if(r < n && arr[p] < arr[r]){
    p = r;
  }

  //when childNode > parentNode => swap
  if(i != p) {
     int temp = arr[p];
     arr[p] = arr[i];
     arr[i] = temp;

     heapify(arr, n, p);
  }
}
